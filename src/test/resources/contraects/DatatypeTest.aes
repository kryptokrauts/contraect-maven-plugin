contract DatatypeTest =

    record company =
      {  ceo: address,
         employees: list(employee),
         location: companyAddress }
         
    record companyAddress =
      {  zip: int,
         street: string,
         city: string }

    record employee =
      {  address: address,
         firstname: string,
         lastname: string }

    type mylist = list(int)
    
    entrypoint testOption(varA: option(string)) : option(string) =
    	varA 
   
    entrypoint testMap(mapValue: map(int, bool)) : map(int, bool) =
        mapValue
        
    entrypoint testListMap(mapValue: list(map(int, string))) : list(map(int, string)) =
        mapValue
        
    entrypoint testCA(varA: companyAddress) : companyAddress =
        varA
        
    entrypoint testC(varA: company) : company =
        varA
       
    entrypoint testSingle(tupleValue: int) : (int) =
        tupleValue
        
    entrypoint testTuple(tupleValue: int * bool) : (int * bool) =
        tupleValue
        
    entrypoint testOctet(tupleValue: int * bool * int * bool * int * bool * int * bool) : (int * bool * int * bool * int * bool * int * bool) =
        tupleValue
    
    entrypoint testStringList(listStringValue: list(string)) : list(string) =
        listStringValue
        
    entrypoint testListStringList(listStringValue: list(list(string))) : list(list(string)) =
        listStringValue
        
    entrypoint testAddress(addressValue: address) : address =
        addressValue
        
    entrypoint testString(varA: string, varB: int) : string =
        String.concat(varA, Int.to_str(varB))
    
    entrypoint testInt(varA: int) : int =
        varA
        
    entrypoint testBool(varA: bool) : bool =
        varA
    
    entrypoint testListListMap(mapValue: list(list(map(int, int)))) : list(list(map(int, int))) =
        mapValue