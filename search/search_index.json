{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Getting started The contr\u00e6ct-maven-plugin is a maven plugin that simplifies interacting with smart contracts on the aeternity blockchain. It generates Java classes out of the sophia contract sourcecode which provide a convenient to deploy a contract on the chain or call a function. It also wraps the input and output objects of those function calls - no parsing is necessary. Detail description The plugin takes a contract written in sophia language as input and generates a Java class representing the contract and its methods. The following statements apply due to the code generation: creates a method to deploy the contract on the chain create method for every entrypoint to call entrypoints of a deployed contract methods will be executed using dryRun - which means it will not be committed and thus included in a block if a method is stateful - transaction additionally will be committed and thus included in a block. The method waits until the transaction is confirmed if a method is payable - an additional parameter is available to set the amount to deposit all input parameters are parsed to a typed Java classes (if possible), also the result is parsed to a Java type (if possible) in case of errors during dryRun call or committing the transaction, exceptions are raised with details from the node initialization of an instance can be done using an existing contractId, thus the methods of an already deployed contract can be called Gas estimation Whenever stateful entrypoints are called using the generated classes, at first a dryRun is done. Therefore a fixed gas limit (default: 50000) is passed as parameter, which should be sufficient for almost all contract calls. After performing the dryRun the exact gas used is returned and the corresponding contractCallModel is updated. The following sample shows the relevant part of the Java class generated by the plugin: contractCallModel = contractCallModel . toBuilder () . gasLimit ( dryRunResult . getContractCallObject () . getGasUsed ()). build (); System requirements System requirements of the Java SDK Include dependencies contraect-maven-plugin To add the contr\u00e6ct-maven-plugin to you build, simply add the following snippet to your pom.xml <build> <plugins> <plugin> <groupId> com.kryptokrauts </groupId> <artifactId> contraect-maven-plugin </artifactId> <version> 2.0.0 </version> <configuration> ... </configuration> </plugin> </plugins> </build> The content of the <configuration> section is covered in the Plugin configuration aepp-sdk-java Under the hood the plugin as well as the generated classes make use of the aepp-sdk-java to implement the interaction with the aeternity node. Therefore the dependency needs to be declared in the corresponding section - please make sure to always use the latest version of the SDK. <dependency> <groupId> com.kryptokrauts </groupId> <artifactId> aepp-sdk-java </artifactId> <version> 3.0.0 < /version </dependency>","title":"Getting Started"},{"location":"index.html#getting-started","text":"The contr\u00e6ct-maven-plugin is a maven plugin that simplifies interacting with smart contracts on the aeternity blockchain. It generates Java classes out of the sophia contract sourcecode which provide a convenient to deploy a contract on the chain or call a function. It also wraps the input and output objects of those function calls - no parsing is necessary.","title":"Getting started"},{"location":"index.html#detail-description","text":"The plugin takes a contract written in sophia language as input and generates a Java class representing the contract and its methods. The following statements apply due to the code generation: creates a method to deploy the contract on the chain create method for every entrypoint to call entrypoints of a deployed contract methods will be executed using dryRun - which means it will not be committed and thus included in a block if a method is stateful - transaction additionally will be committed and thus included in a block. The method waits until the transaction is confirmed if a method is payable - an additional parameter is available to set the amount to deposit all input parameters are parsed to a typed Java classes (if possible), also the result is parsed to a Java type (if possible) in case of errors during dryRun call or committing the transaction, exceptions are raised with details from the node initialization of an instance can be done using an existing contractId, thus the methods of an already deployed contract can be called","title":"Detail description"},{"location":"index.html#gas-estimation","text":"Whenever stateful entrypoints are called using the generated classes, at first a dryRun is done. Therefore a fixed gas limit (default: 50000) is passed as parameter, which should be sufficient for almost all contract calls. After performing the dryRun the exact gas used is returned and the corresponding contractCallModel is updated. The following sample shows the relevant part of the Java class generated by the plugin: contractCallModel = contractCallModel . toBuilder () . gasLimit ( dryRunResult . getContractCallObject () . getGasUsed ()). build ();","title":"Gas estimation"},{"location":"index.html#system-requirements","text":"System requirements of the Java SDK","title":"System requirements"},{"location":"index.html#include-dependencies","text":"","title":"Include dependencies"},{"location":"index.html#contraect-maven-plugin","text":"To add the contr\u00e6ct-maven-plugin to you build, simply add the following snippet to your pom.xml <build> <plugins> <plugin> <groupId> com.kryptokrauts </groupId> <artifactId> contraect-maven-plugin </artifactId> <version> 2.0.0 </version> <configuration> ... </configuration> </plugin> </plugins> </build> The content of the <configuration> section is covered in the Plugin configuration","title":"contraect-maven-plugin"},{"location":"index.html#aepp-sdk-java","text":"Under the hood the plugin as well as the generated classes make use of the aepp-sdk-java to implement the interaction with the aeternity node. Therefore the dependency needs to be declared in the corresponding section - please make sure to always use the latest version of the SDK. <dependency> <groupId> com.kryptokrauts </groupId> <artifactId> aepp-sdk-java </artifactId> <version> 3.0.0 < /version </dependency>","title":"aepp-sdk-java"},{"location":"changelog.html","text":"Changelog v2.0.0 This release introduces type mapping support for the \u00e6ternity naming system (AENS) and ChainTTL as well as improvements, better error handling and fixes for known issues. This release is improved and adapted to the v3.0.0 of the aepp-sdk-java . Bugfixes #39 an NPE can occur if waiting for the tx leads to \"Tx not mined\" #63 handle explicit return type unit properly #66 getNextNonce should return BigInteger.ONE if account doesn't exist New Features #2 check contract bytecode for given contractId #62 introduced Chain.ttl type #65 Support for AENS type General changes #40 handle known internal errors from dryRun call #49 better readable error message on errors within dryRun #52 provided getter and setter for contract address #58 remove fixed gas limit from dryRun and make configurable via maven config SDK documentation via MkDocs v1.0.0 This release provides full support of complex data and return types, type aliases and includes of other contracts and libraries. Also the result mapping of contract calls was improved and adapted to the v2.2.1 of the aepp-sdk-java . A unified error handling was introduced, please refer to the documentation . Enhancements #1 support of complex datatypes #4 support of custom types #6 handle revert messages properly #20 evaluate impact of including other contracts #21 add support for type aliases #22 handle option return types in a convenient way #24 support void methods #27 handle payable modifier (aettos as param in generated methods) v0.9.1 Fixes #16 invalid deploy-method of generated class when init-function has params v0.9.0 Initial release of the contraect-maven-plugin to interact with the smart contracts on the \u00e6ternity blockchain. Initial functionalities automated generation of java classes for default \u00e6ternity datatypes generation of java classes for sophia contracts generation of deploy method which transactionally deploys the contract on the \u00e6ternity blockchain generated classes support existing contracts contractId needs to be passed to constructor mapping of simple sophia types to java types","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"changelog.html#v200","text":"This release introduces type mapping support for the \u00e6ternity naming system (AENS) and ChainTTL as well as improvements, better error handling and fixes for known issues. This release is improved and adapted to the v3.0.0 of the aepp-sdk-java .","title":"v2.0.0"},{"location":"changelog.html#bugfixes","text":"#39 an NPE can occur if waiting for the tx leads to \"Tx not mined\" #63 handle explicit return type unit properly #66 getNextNonce should return BigInteger.ONE if account doesn't exist","title":"Bugfixes"},{"location":"changelog.html#new-features","text":"#2 check contract bytecode for given contractId #62 introduced Chain.ttl type #65 Support for AENS type","title":"New Features"},{"location":"changelog.html#general-changes","text":"#40 handle known internal errors from dryRun call #49 better readable error message on errors within dryRun #52 provided getter and setter for contract address #58 remove fixed gas limit from dryRun and make configurable via maven config SDK documentation via MkDocs","title":"General changes"},{"location":"changelog.html#v100","text":"This release provides full support of complex data and return types, type aliases and includes of other contracts and libraries. Also the result mapping of contract calls was improved and adapted to the v2.2.1 of the aepp-sdk-java . A unified error handling was introduced, please refer to the documentation .","title":"v1.0.0"},{"location":"changelog.html#enhancements","text":"#1 support of complex datatypes #4 support of custom types #6 handle revert messages properly #20 evaluate impact of including other contracts #21 add support for type aliases #22 handle option return types in a convenient way #24 support void methods #27 handle payable modifier (aettos as param in generated methods)","title":"Enhancements"},{"location":"changelog.html#v091","text":"","title":"v0.9.1"},{"location":"changelog.html#fixes","text":"#16 invalid deploy-method of generated class when init-function has params","title":"Fixes"},{"location":"changelog.html#v090","text":"Initial release of the contraect-maven-plugin to interact with the smart contracts on the \u00e6ternity blockchain.","title":"v0.9.0"},{"location":"changelog.html#initial-functionalities","text":"automated generation of java classes for default \u00e6ternity datatypes generation of java classes for sophia contracts generation of deploy method which transactionally deploys the contract on the \u00e6ternity blockchain generated classes support existing contracts contractId needs to be passed to constructor mapping of simple sophia types to java types","title":"Initial functionalities"},{"location":"contract-interaction.html","text":"Contract interaction Local node example The generated Java classes hide all the operations needed to interact with smart contracts on the aeternity blockchain. The only thing you need to do is create an instance of the generated class and provide an AeternityServiceConfiguration within the constructor of the generated class. Without this configuration we wouldn't know to which compiler and to which node we should perform the necessary requests. In this example we use the CryptoHamster sample from the contr\u00e6cts app which we want to execute on our local \u00e6ternity node KeyPairService keyPairService = new KeyPairServiceFactory (). getService (); KeyPair keyPair = keyPairService . recoverKeyPair ( < privateKey > ); AeternityServiceConfiguration config = AeternityServiceConfiguration . configure () . baseUrl ( \"http://localhost\" ) . compilerBaseUrl ( \"http://localhost:3080\" ) . mdwBaseUrl ( \"http://localhost:4000\" ) . network ( Network . DEVNET ) . keyPair ( keyPair ) . compile (); // get an instance of the generated contract object CryptoHamster cryptoHamsterInstance = new CryptoHamster ( config , null ); // deploy the contract on the local node Pair < String , String > deployment = cryptoHamsterInstance . deploy (); String txHash = deployment . getValue0 (); String contractId = deployment . getValue1 (); log . info ( \"Deployed contract id - {} \" , contractId ); // call a function of the contract log . info ( \"Call create hamster {}\" , cryptoHamsterInstance . createHamster ( \"kryptokrauts\" )); log . info ( \"Call nameExists {}\" , cryptoHamsterInstance . nameExists ( \"kryptokrauts\" )); log . info ( \"Call getHamsterDNA {}\" , cryptoHamsterInstance . getHamsterDNA ( \"kryptokrauts\" )); Further examples The contr\u00e6ct-showcase-maven repository showcases how to use the contr\u00e6ct-maven-plugin to easily interact with smart contracts in Java. One of the examples is a MultiSig contract to be used with the Generalized Accounts feature.","title":"Contr\u00e6ct interaction"},{"location":"contract-interaction.html#contract-interaction","text":"","title":"Contract interaction"},{"location":"contract-interaction.html#local-node-example","text":"The generated Java classes hide all the operations needed to interact with smart contracts on the aeternity blockchain. The only thing you need to do is create an instance of the generated class and provide an AeternityServiceConfiguration within the constructor of the generated class. Without this configuration we wouldn't know to which compiler and to which node we should perform the necessary requests. In this example we use the CryptoHamster sample from the contr\u00e6cts app which we want to execute on our local \u00e6ternity node KeyPairService keyPairService = new KeyPairServiceFactory (). getService (); KeyPair keyPair = keyPairService . recoverKeyPair ( < privateKey > ); AeternityServiceConfiguration config = AeternityServiceConfiguration . configure () . baseUrl ( \"http://localhost\" ) . compilerBaseUrl ( \"http://localhost:3080\" ) . mdwBaseUrl ( \"http://localhost:4000\" ) . network ( Network . DEVNET ) . keyPair ( keyPair ) . compile (); // get an instance of the generated contract object CryptoHamster cryptoHamsterInstance = new CryptoHamster ( config , null ); // deploy the contract on the local node Pair < String , String > deployment = cryptoHamsterInstance . deploy (); String txHash = deployment . getValue0 (); String contractId = deployment . getValue1 (); log . info ( \"Deployed contract id - {} \" , contractId ); // call a function of the contract log . info ( \"Call create hamster {}\" , cryptoHamsterInstance . createHamster ( \"kryptokrauts\" )); log . info ( \"Call nameExists {}\" , cryptoHamsterInstance . nameExists ( \"kryptokrauts\" )); log . info ( \"Call getHamsterDNA {}\" , cryptoHamsterInstance . getHamsterDNA ( \"kryptokrauts\" ));","title":"Local node example"},{"location":"contract-interaction.html#further-examples","text":"The contr\u00e6ct-showcase-maven repository showcases how to use the contr\u00e6ct-maven-plugin to easily interact with smart contracts in Java. One of the examples is a MultiSig contract to be used with the Generalized Accounts feature.","title":"Further examples"},{"location":"roadmap.html","text":"Roadmap The following improvements and enhancements are planned for the next release. Consolidation with SDK The generated classes will make use of the convienence methods performing contract create and contract calls included in the Java SDK. Sophia Types To further consolidate logic with the Java SDK, Sophia Types will be moved to the SDK and reused instead of being generated within every class. This will help keeping the code clean and readable and avoid class clashes and confusion when working with multiple generated contracts in one project. Enhanced result object Currently a contract call returns a pair of transaction hash and typed result. It is planned that every contract call returns a special return object (ContractTxResult) which holds more information about the contract call including the raw node result.","title":"Roadmap"},{"location":"roadmap.html#roadmap","text":"The following improvements and enhancements are planned for the next release.","title":"Roadmap"},{"location":"roadmap.html#consolidation-with-sdk","text":"The generated classes will make use of the convienence methods performing contract create and contract calls included in the Java SDK.","title":"Consolidation with SDK"},{"location":"roadmap.html#sophia-types","text":"To further consolidate logic with the Java SDK, Sophia Types will be moved to the SDK and reused instead of being generated within every class. This will help keeping the code clean and readable and avoid class clashes and confusion when working with multiple generated contracts in one project.","title":"Sophia Types"},{"location":"roadmap.html#enhanced-result-object","text":"Currently a contract call returns a pair of transaction hash and typed result. It is planned that every contract call returns a special return object (ContractTxResult) which holds more information about the contract call including the raw node result.","title":"Enhanced result object"},{"location":"use-the-plugin/error-codes.html","text":"Error codes During the contract class generation process, on of the following error codes might occur. In every case, a detailed message is displayed. If you face such an error, you're welcome to help improving the contraect-maven-plugin. Therefore, please create an issue on contraect-maven-plugin along with your contract code and the arguments displayed in the error message. 005 - FAIL_IMPORT_INCLUDES Indicates an error concering a library or contract include 010 - FAIL_CREATE_ABI Indicates an error concering parsing the contract code to abi/json representation 020 - FAIL_PARSE_ROOT Indicates an error concering parsing the contract's json tree 030 - FAIL_GENERATE_CONTRACT Indicates a general error creating the Java class out of the contract 100 - FAIL_READ_CONTRACT_FILE Indicates an error reading the contract file 200 - UNFORSEEN_MAPPING Indicates an unforseen or unimplemented case of type mapping 300 - UNFORSEEN_CUSTOM_TYPEDEF Indicates, that custom type definition cannot be parsed","title":"Error codes"},{"location":"use-the-plugin/error-codes.html#error-codes","text":"During the contract class generation process, on of the following error codes might occur. In every case, a detailed message is displayed. If you face such an error, you're welcome to help improving the contraect-maven-plugin. Therefore, please create an issue on contraect-maven-plugin along with your contract code and the arguments displayed in the error message.","title":"Error codes"},{"location":"use-the-plugin/error-codes.html#005-fail_import_includes","text":"Indicates an error concering a library or contract include","title":"005 - FAIL_IMPORT_INCLUDES"},{"location":"use-the-plugin/error-codes.html#010-fail_create_abi","text":"Indicates an error concering parsing the contract code to abi/json representation","title":"010 - FAIL_CREATE_ABI"},{"location":"use-the-plugin/error-codes.html#020-fail_parse_root","text":"Indicates an error concering parsing the contract's json tree","title":"020 - FAIL_PARSE_ROOT"},{"location":"use-the-plugin/error-codes.html#030-fail_generate_contract","text":"Indicates a general error creating the Java class out of the contract","title":"030 - FAIL_GENERATE_CONTRACT"},{"location":"use-the-plugin/error-codes.html#100-fail_read_contract_file","text":"Indicates an error reading the contract file","title":"100 - FAIL_READ_CONTRACT_FILE"},{"location":"use-the-plugin/error-codes.html#200-unforseen_mapping","text":"Indicates an unforseen or unimplemented case of type mapping","title":"200 - UNFORSEEN_MAPPING"},{"location":"use-the-plugin/error-codes.html#300-unforseen_custom_typedef","text":"Indicates, that custom type definition cannot be parsed","title":"300 - UNFORSEEN_CUSTOM_TYPEDEF"},{"location":"use-the-plugin/plugin-configuration.html","text":"Plugin configuration Parameters Most of the configuration parameters are shipped with default values, which in almost all cases don't need to be explicitly set. The following list gives an overview over the configurable parameters of the plugin. Example This is an example for the minimal required configuration that only provides the required parameters: <plugin> <groupId> com.kryptokrauts </groupId> <artifactId> contraect-maven-plugin </artifactId> <version> 2.0.0 </version> <configuration> <codegen> <compilerBaseUrl> https://compiler.aepps.com </compilerBaseUrl> <directories> <directory> ${project.basedir}/src/main/resources </directory> </directories> </codegen> </configuration> <executions> <execution> <goals> <goal> generate-contraects </goal> </goals> </execution> </executions> </plugin> Codegen configuration block The <codegen> configuration block contains the general parameters for the plugin. Parameter Description Default Sample initFunctionName Name of the deploy init function to call right after deploy init targetPackage Java package of the generated contraect classes com.kryptokrauts.contraect.generated datatypePackage Java package of the generated datatypes com.kryptokrauts.contraect.generated.datatypes targetPath Generated Java classes will be stored in this folder target/generated-sources/contraect compilerBaseUrl (*) The base url of the sophia compiler https://compiler.aeternity.io http://localhost:3000 numTrials Number of trials (with 1 sec delay) to wait for transaction to be mined (relevant for stateful calls and the deploy method) 60 directories (*) List of directories to be scanned for contract files <directory>${project.basedir}/src/main/resources\\<directory> contractSuffix File suffix identifying a contract code file aes resultAbortKey indicates the abort case of a function call, also applies for dryRun call abort resultErrorKeyindicates the error case of a function call, also applies for dryRun call error resultRevertKey indicates an revert of a contract deploy revert dryRunDeployGas gas limit for the contract deploy method 50000 ABI-JSON configuration block The <abi-json> configuration block defines the json key names which are used to parse the contract code. The listed elements are used to parse the contracts JSON ABI and further transform this into the resulting contract java class. Typically this part of the configuration can be completely ommitted unless the basic layout of the sophia contract ABI does not change. Parameter Description Default rootElement key for contract root contract eventElement key for events events functionsElement key for contract functions functions contractNameElement key for contract name element name payableElement key for contract payable flag payable stateElement key for contracts state definition state customTypeElement key for contracts custom types type_defs functionNameElement key for a custom functions name name functionReturnTypeElement key for a custom functions return type returns functionArgumentsElement key for a custom functions arguments arguments functionArgumentTypeElement key for a custom functions argument type type functionArgumentNameElement key for a custom functions argument name name functionStatefulElement key for a custom function flagging stateful type stateful customTypeNameElement key for a custom types name name customTypeTypedefElement key for a custom types typedefinition list typedef customTypeTypedefNameElement key for one custom types typedefintion name name customTypeTypedefTypeElement key for one custom types typedefinition type type","title":"Plugin configuration"},{"location":"use-the-plugin/plugin-configuration.html#plugin-configuration","text":"","title":"Plugin configuration"},{"location":"use-the-plugin/plugin-configuration.html#parameters","text":"Most of the configuration parameters are shipped with default values, which in almost all cases don't need to be explicitly set. The following list gives an overview over the configurable parameters of the plugin.","title":"Parameters"},{"location":"use-the-plugin/plugin-configuration.html#example","text":"This is an example for the minimal required configuration that only provides the required parameters: <plugin> <groupId> com.kryptokrauts </groupId> <artifactId> contraect-maven-plugin </artifactId> <version> 2.0.0 </version> <configuration> <codegen> <compilerBaseUrl> https://compiler.aepps.com </compilerBaseUrl> <directories> <directory> ${project.basedir}/src/main/resources </directory> </directories> </codegen> </configuration> <executions> <execution> <goals> <goal> generate-contraects </goal> </goals> </execution> </executions> </plugin>","title":"Example"},{"location":"use-the-plugin/plugin-configuration.html#codegen-configuration-block","text":"The <codegen> configuration block contains the general parameters for the plugin. Parameter Description Default Sample initFunctionName Name of the deploy init function to call right after deploy init targetPackage Java package of the generated contraect classes com.kryptokrauts.contraect.generated datatypePackage Java package of the generated datatypes com.kryptokrauts.contraect.generated.datatypes targetPath Generated Java classes will be stored in this folder target/generated-sources/contraect compilerBaseUrl (*) The base url of the sophia compiler https://compiler.aeternity.io http://localhost:3000 numTrials Number of trials (with 1 sec delay) to wait for transaction to be mined (relevant for stateful calls and the deploy method) 60 directories (*) List of directories to be scanned for contract files <directory>${project.basedir}/src/main/resources\\<directory> contractSuffix File suffix identifying a contract code file aes resultAbortKey indicates the abort case of a function call, also applies for dryRun call abort resultErrorKeyindicates the error case of a function call, also applies for dryRun call error resultRevertKey indicates an revert of a contract deploy revert dryRunDeployGas gas limit for the contract deploy method 50000","title":"Codegen configuration block"},{"location":"use-the-plugin/plugin-configuration.html#abi-json-configuration-block","text":"The <abi-json> configuration block defines the json key names which are used to parse the contract code. The listed elements are used to parse the contracts JSON ABI and further transform this into the resulting contract java class. Typically this part of the configuration can be completely ommitted unless the basic layout of the sophia contract ABI does not change. Parameter Description Default rootElement key for contract root contract eventElement key for events events functionsElement key for contract functions functions contractNameElement key for contract name element name payableElement key for contract payable flag payable stateElement key for contracts state definition state customTypeElement key for contracts custom types type_defs functionNameElement key for a custom functions name name functionReturnTypeElement key for a custom functions return type returns functionArgumentsElement key for a custom functions arguments arguments functionArgumentTypeElement key for a custom functions argument type type functionArgumentNameElement key for a custom functions argument name name functionStatefulElement key for a custom function flagging stateful type stateful customTypeNameElement key for a custom types name name customTypeTypedefElement key for a custom types typedefinition list typedef customTypeTypedefNameElement key for one custom types typedefintion name name customTypeTypedefTypeElement key for one custom types typedefinition type type","title":"ABI-JSON configuration block"},{"location":"use-the-plugin/plugin-execution.html","text":"Plugin execution Generate Java classes The following mvn command can be used to explicitly generate the Java classes based on given contracts: mvn contraect:generate-contraects After the plugin execution you should find the generated Java classes in the folder you specified through the configuration property targetPath. Alternatively the default maven lifecycle phase generate-sources can be called - therefore the plugin configuration has to be as follows: <plugin> <groupId> com.kryptokrauts </groupId> <artifactId> contraect-maven-plugin </artifactId> <version> 2.0.0 </version> ... <executions> <execution> <goals> <goal> generate-contraects </goal> </goals> </execution> </executions> </plugin> Add generated Java classes as sources Option 1 Add the folder containing the generated Java classes manually as source-folder within your IDE. Option 2 Generate classes directly into the regular source folder by defining src/main/java as targetPath . Note : with this solution you will probably end up having the generated files committed to the repo. Option 3 Add the resources using the build-helper-maven-plugin <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> build-helper-maven-plugin </artifactId> <version> 3.0.0 </version> <executions> <execution> <phase> generate-sources </phase> <goals> <goal> add-source </goal> </goals> <configuration> <sources> <source> ${project.build.directory}/generated-sources/contraect </source> </sources> </configuration> </execution> </executions> </plugin>","title":"Plugin execution"},{"location":"use-the-plugin/plugin-execution.html#plugin-execution","text":"","title":"Plugin execution"},{"location":"use-the-plugin/plugin-execution.html#generate-java-classes","text":"The following mvn command can be used to explicitly generate the Java classes based on given contracts: mvn contraect:generate-contraects After the plugin execution you should find the generated Java classes in the folder you specified through the configuration property targetPath. Alternatively the default maven lifecycle phase generate-sources can be called - therefore the plugin configuration has to be as follows: <plugin> <groupId> com.kryptokrauts </groupId> <artifactId> contraect-maven-plugin </artifactId> <version> 2.0.0 </version> ... <executions> <execution> <goals> <goal> generate-contraects </goal> </goals> </execution> </executions> </plugin>","title":"Generate Java classes"},{"location":"use-the-plugin/plugin-execution.html#add-generated-java-classes-as-sources","text":"","title":"Add generated Java classes as sources"},{"location":"use-the-plugin/plugin-execution.html#option-1","text":"Add the folder containing the generated Java classes manually as source-folder within your IDE.","title":"Option 1"},{"location":"use-the-plugin/plugin-execution.html#option-2","text":"Generate classes directly into the regular source folder by defining src/main/java as targetPath . Note : with this solution you will probably end up having the generated files committed to the repo.","title":"Option 2"},{"location":"use-the-plugin/plugin-execution.html#option-3","text":"Add the resources using the build-helper-maven-plugin <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> build-helper-maven-plugin </artifactId> <version> 3.0.0 </version> <executions> <execution> <phase> generate-sources </phase> <goals> <goal> add-source </goal> </goals> <configuration> <sources> <source> ${project.build.directory}/generated-sources/contraect </source> </sources> </configuration> </execution> </executions> </plugin>","title":"Option 3"}]}